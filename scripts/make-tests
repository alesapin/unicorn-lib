#!/usr/bin/env bash

tests="$(ls */*-test.cpp 2>/dev/null | grep -Ev '/unit-test\.cpp$')"

if ! [ "$tests" ]; then exit; fi

unit=$(head -n 1 <<< "$tests" | sed -E 's!/.+!/unit-test.cpp!')
priority='common|core|utility'
tests1="$(grep -E "/($priority)-test\.cpp" <<< "$tests" 2>/dev/null)"
tests2="$(grep -Ev "/($priority)-test\.cpp" <<< "$tests" 2>/dev/null)"

write_externs() {
    for file in $tests1 $tests2; do
        module=$(sed -E 's!.*/(.+)-test\.cpp!\1!' <<< $file | tr - _)
        module=$(sed -E 's/(_[a-z])+$//' <<< $module)
        grep -E "^void test_[A-Za-z0-9_]+_$module_[A-Za-z0-9_]+\(\)" $file \
            | sed -E 's!(void [A-Za-z0-9_]+\(\)).*!extern \1;!'
    done
}

write_index() {
    for file in $tests1 $tests2; do
        module=$(sed -E 's!.*/(.+)-test\.cpp!\1!' <<< $file | tr - _)
        module=$(sed -E 's/(_[a-z])+$//' <<< $module)
        grep -E "^void test_[A-Za-z0-9_]+_$module_[A-Za-z0-9_]+\(\)" $file \
            | sed -E 's/_'"$module"'_/ /' \
            | while read void prefix suffix; do
                project=${prefix#test_}
                section=${suffix%%()*}
                function=test_${project}_${module}_${section}
                project=${project//_/-}
                section=${section//_/-}
                mod=${module//_/-}
                echo "        { \"$project/$mod/$section\", $function },"
            done
    done
}

cat << EOF > $unit
// This file is automatically generated

#include "unicorn/unit-test.hpp"

EOF

write_externs >> $unit

cat << EOF >> $unit

int main() {

    static const RS::UnitTest::test_index index = {

EOF

write_index >> $unit

cat << EOF >> $unit

    };

    return RS::UnitTest::test_main(index);

}
EOF
